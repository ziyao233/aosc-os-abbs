From b0a10aaf9021eb3cc52d7bf7f5901b7cc6bff7fd Mon Sep 17 00:00:00 2001
From: Mingcong Bai <jeffbai@aosc.io>
Date: Tue, 15 Oct 2024 18:37:52 +0800
Subject: [PATCH 159/164] AOSCOS: Revert "cpufreq: amd-pstate: initialize core
 precision boost state"

This commit, introduced as part of AMD P-State's updates for 6.11, breaks
power state transition on Lenovo ThinkBook 14 G6+ AHP with AMD Ryzen 8845H
APUs (and likely affects other Zen4-based Lenovo laptops).

Whilst on "Performance" power profile, the APU can draw up to 65 watts
while connected to AC power and up to 11 watts on battery under all-core
load. But with the reverted change, the if one were to unplug the laptop
and re-connect AC power, the power draw would fail to recover to 65 watts
and remain at around 35 watts.

After reverting this change, the maximal power draw successfully recovers
to 65 watts even after repeated switching between AC and battery power.

This reverts commit c8c68c38b56f4036771ebe2f8d664a2e98728318.

Upstream report: https://gitlab.freedesktop.org/drm/amd/-/issues/3690

Signed-off-by: Mingcong Bai <jeffbai@aosc.io>

Signed-off-by: Kexy Biscuit <kexybiscuit@aosc.io>
---
 drivers/cpufreq/amd-pstate.c | 119 +++++++----------------------------
 drivers/cpufreq/amd-pstate.h |   1 -
 2 files changed, 23 insertions(+), 97 deletions(-)

diff --git a/drivers/cpufreq/amd-pstate.c b/drivers/cpufreq/amd-pstate.c
index 929b9097a6c1..00ddd781e323 100644
--- a/drivers/cpufreq/amd-pstate.c
+++ b/drivers/cpufreq/amd-pstate.c
@@ -695,53 +695,6 @@ static void amd_pstate_adjust_perf(unsigned int cpu,
 	cpufreq_cpu_put(policy);
 }
 
-static int amd_pstate_cpu_boost_update(struct cpufreq_policy *policy, bool on)
-{
-	struct amd_cpudata *cpudata = policy->driver_data;
-	struct cppc_perf_ctrls perf_ctrls;
-	u32 highest_perf, nominal_perf, nominal_freq, max_freq;
-	int ret = 0;
-
-	highest_perf = READ_ONCE(cpudata->highest_perf);
-	nominal_perf = READ_ONCE(cpudata->nominal_perf);
-	nominal_freq = READ_ONCE(cpudata->nominal_freq);
-	max_freq = READ_ONCE(cpudata->max_freq);
-
-	if (boot_cpu_has(X86_FEATURE_CPPC)) {
-		u64 value = READ_ONCE(cpudata->cppc_req_cached);
-
-		value &= ~GENMASK_ULL(7, 0);
-		value |= on ? highest_perf : nominal_perf;
-		WRITE_ONCE(cpudata->cppc_req_cached, value);
-
-		wrmsrl_on_cpu(cpudata->cpu, MSR_AMD_CPPC_REQ, value);
-	} else {
-		perf_ctrls.max_perf = on ? highest_perf : nominal_perf;
-		ret = cppc_set_perf(cpudata->cpu, &perf_ctrls);
-		if (ret) {
-			cpufreq_cpu_release(policy);
-			pr_debug("Failed to set max perf on CPU:%d. ret:%d\n",
-				cpudata->cpu, ret);
-			return ret;
-		}
-	}
-
-	if (on)
-		policy->cpuinfo.max_freq = max_freq;
-	else if (policy->cpuinfo.max_freq > nominal_freq * 1000)
-		policy->cpuinfo.max_freq = nominal_freq * 1000;
-
-	policy->max = policy->cpuinfo.max_freq;
-
-	if (cppc_state == AMD_PSTATE_PASSIVE) {
-		ret = freq_qos_update_request(&cpudata->req[1], policy->cpuinfo.max_freq);
-		if (ret < 0)
-			pr_debug("Failed to update freq constraint: CPU%d\n", cpudata->cpu);
-	}
-
-	return ret < 0 ? ret : 0;
-}
-
 static int amd_pstate_set_boost(struct cpufreq_policy *policy, int state)
 {
 	struct amd_cpudata *cpudata = policy->driver_data;
@@ -749,51 +702,36 @@ static int amd_pstate_set_boost(struct cpufreq_policy *policy, int state)
 
 	if (!cpudata->boost_supported) {
 		pr_err("Boost mode is not supported by this processor or SBIOS\n");
-		return -EOPNOTSUPP;
+		return -EINVAL;
 	}
-	mutex_lock(&amd_pstate_driver_lock);
-	ret = amd_pstate_cpu_boost_update(policy, state);
-	WRITE_ONCE(cpudata->boost_state, !ret ? state : false);
-	policy->boost_enabled = !ret ? state : false;
-	refresh_frequency_limits(policy);
-	mutex_unlock(&amd_pstate_driver_lock);
 
-	return ret;
-}
+	if (state)
+		policy->cpuinfo.max_freq = cpudata->max_freq;
+	else
+		policy->cpuinfo.max_freq = cpudata->nominal_freq * 1000;
 
-static int amd_pstate_init_boost_support(struct amd_cpudata *cpudata)
-{
-	u64 boost_val;
-	int ret = -1;
+	policy->max = policy->cpuinfo.max_freq;
 
-	/*
-	 * If platform has no CPB support or disable it, initialize current driver
-	 * boost_enabled state to be false, it is not an error for cpufreq core to handle.
-	 */
-	if (!cpu_feature_enabled(X86_FEATURE_CPB)) {
-		pr_debug_once("Boost CPB capabilities not present in the processor\n");
-		ret = 0;
-		goto exit_err;
-	}
+	ret = freq_qos_update_request(&cpudata->req[1],
+				      policy->cpuinfo.max_freq);
+	if (ret < 0)
+		return ret;
 
-	/* at least one CPU supports CPB, even if others fail later on to set up */
-	current_pstate_driver->boost_enabled = true;
+	return 0;
+}
 
-	ret = rdmsrl_on_cpu(cpudata->cpu, MSR_K7_HWCR, &boost_val);
-	if (ret) {
-		pr_err_once("failed to read initial CPU boost state!\n");
-		ret = -EIO;
-		goto exit_err;
-	}
+static void amd_pstate_boost_init(struct amd_cpudata *cpudata)
+{
+	u32 highest_perf, nominal_perf;
 
-	if (!(boost_val & MSR_K7_HWCR_CPB_DIS))
-		cpudata->boost_supported = true;
+	highest_perf = READ_ONCE(cpudata->highest_perf);
+	nominal_perf = READ_ONCE(cpudata->nominal_perf);
 
-	return 0;
+	if (highest_perf <= nominal_perf)
+		return;
 
-exit_err:
-	cpudata->boost_supported = false;
-	return ret;
+	cpudata->boost_supported = true;
+	current_pstate_driver->boost_enabled = true;
 }
 
 static void amd_perf_ctl_reset(unsigned int cpu)
@@ -1051,10 +989,6 @@ static int amd_pstate_cpu_init(struct cpufreq_policy *policy)
 	if (ret)
 		goto free_cpudata1;
 
-	ret = amd_pstate_init_boost_support(cpudata);
-	if (ret)
-		goto free_cpudata1;
-
 	min_freq = READ_ONCE(cpudata->min_freq);
 	max_freq = READ_ONCE(cpudata->max_freq);
 
@@ -1067,8 +1001,6 @@ static int amd_pstate_cpu_init(struct cpufreq_policy *policy)
 	policy->cpuinfo.min_freq = min_freq;
 	policy->cpuinfo.max_freq = max_freq;
 
-	policy->boost_enabled = READ_ONCE(cpudata->boost_supported);
-
 	/* It will be updated by governor */
 	policy->cur = policy->cpuinfo.min_freq;
 
@@ -1094,6 +1026,7 @@ static int amd_pstate_cpu_init(struct cpufreq_policy *policy)
 
 	policy->driver_data = cpudata;
 
+	amd_pstate_boost_init(cpudata);
 	if (!current_pstate_driver->adjust_perf)
 		current_pstate_driver->adjust_perf = amd_pstate_adjust_perf;
 
@@ -1516,10 +1449,6 @@ static int amd_pstate_epp_cpu_init(struct cpufreq_policy *policy)
 	if (ret)
 		goto free_cpudata1;
 
-	ret = amd_pstate_init_boost_support(cpudata);
-	if (ret)
-		goto free_cpudata1;
-
 	min_freq = READ_ONCE(cpudata->min_freq);
 	max_freq = READ_ONCE(cpudata->max_freq);
 
@@ -1535,8 +1464,6 @@ static int amd_pstate_epp_cpu_init(struct cpufreq_policy *policy)
 	policy->min = policy->cpuinfo.min_freq;
 	policy->max = policy->cpuinfo.max_freq;
 
-	policy->boost_enabled = READ_ONCE(cpudata->boost_supported);
-
 	/*
 	 * Set the policy to provide a valid fallback value in case
 	 * the default cpufreq governor is neither powersave nor performance.
@@ -1558,6 +1485,7 @@ static int amd_pstate_epp_cpu_init(struct cpufreq_policy *policy)
 			return ret;
 		WRITE_ONCE(cpudata->cppc_cap1_cached, value);
 	}
+	amd_pstate_boost_init(cpudata);
 
 	return 0;
 
@@ -1818,7 +1746,6 @@ static struct cpufreq_driver amd_pstate_epp_driver = {
 	.suspend	= amd_pstate_epp_suspend,
 	.resume		= amd_pstate_epp_resume,
 	.update_limits	= amd_pstate_update_limits,
-	.set_boost	= amd_pstate_set_boost,
 	.name		= "amd-pstate-epp",
 	.attr		= amd_pstate_epp_attr,
 };
diff --git a/drivers/cpufreq/amd-pstate.h b/drivers/cpufreq/amd-pstate.h
index cc8bb2bc325a..f80b33fa5d43 100644
--- a/drivers/cpufreq/amd-pstate.h
+++ b/drivers/cpufreq/amd-pstate.h
@@ -100,7 +100,6 @@ struct amd_cpudata {
 	u64	cppc_cap1_cached;
 	bool	suspended;
 	s16	epp_default;
-	bool	boost_state;
 };
 
 #endif /* _LINUX_AMD_PSTATE_H */
-- 
2.47.0


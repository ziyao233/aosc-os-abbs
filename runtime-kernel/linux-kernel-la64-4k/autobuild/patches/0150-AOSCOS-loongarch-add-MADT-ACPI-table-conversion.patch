From 21d40c9e10e9d4a4336a8c4d873af2bd6d11efa2 Mon Sep 17 00:00:00 2001
From: Miao Wang <shankerwangmiao@gmail.com>
Date: Sat, 20 Jul 2024 06:32:15 +0800
Subject: [PATCH 150/164] AOSCOS: loongarch: add MADT ACPI table conversion

On machines with legacy firmware with BPI version BPI01000, i.e. the
older version, the content of the MADT ACPI table is not following the
later finalized ACPI standard. A conversion of the content is added by
this patch. Also the patch generates and adds a MCFG table accordingly.

The above behavior is only enabled when BPI data and the BPI01000 version
is detected.

Signed-off-by: Miao Wang <shankerwangmiao@gmail.com>
Signed-off-by: Kexy Biscuit <kexybiscuit@aosc.io>
---
 arch/loongarch/include/asm/acpi.h   |   5 +
 arch/loongarch/kernel/legacy_boot.c | 304 ++++++++++++++++++++++++++++
 drivers/acpi/tables.c               |   2 +
 include/linux/acpi.h                |  10 +
 4 files changed, 321 insertions(+)

diff --git a/arch/loongarch/include/asm/acpi.h b/arch/loongarch/include/asm/acpi.h
index 313f66f7913a..ba78288a26e3 100644
--- a/arch/loongarch/include/asm/acpi.h
+++ b/arch/loongarch/include/asm/acpi.h
@@ -45,6 +45,11 @@ static inline u32 get_acpi_id_for_cpu(unsigned int cpu)
 	return acpi_core_pic[cpu_logical_map(cpu)].processor_id;
 }
 
+#define ACPI_HAVE_ARCH_TABLE_OVERRIDE
+extern void acpi_arch_os_table_override (struct acpi_table_header *existing_table, struct acpi_table_header **new_table);
+#define ACPI_HAVE_ARCH_TABLE_INIT_COMPLETE
+extern void acpi_arch_table_init_complete(void);
+
 #endif /* !CONFIG_ACPI */
 
 #define ACPI_TABLE_UPGRADE_MAX_PHYS ARCH_LOW_ADDRESS_LIMIT
diff --git a/arch/loongarch/kernel/legacy_boot.c b/arch/loongarch/kernel/legacy_boot.c
index 30c01c8b22a0..841d8db85a3c 100644
--- a/arch/loongarch/kernel/legacy_boot.c
+++ b/arch/loongarch/kernel/legacy_boot.c
@@ -1,7 +1,13 @@
 #include <linux/efi.h>
 #include <linux/memblock.h>
+#include <linux/acpi.h>
+#include <linux/kmemleak.h>
+#include <linux/kernel.h>
 
 #include <asm/early_ioremap.h>
+#include <asm/loongson.h>
+#include <asm/irq.h>
+#include <asm/numa.h>
 
 #include "legacy_boot.h"
 
@@ -37,6 +43,9 @@ enum bpi_mem_type {
 	ADDRESS_TYPE_MAX,
 };
 
+#define MSI_MSG_ADDRESS		0x2FF00000
+#define MSI_MSG_DEFAULT_COUNT	0xC0
+
 struct loongarch_bpi_mem_map {
 	struct	loongarch_bpi_ext_hdr header;	/*{"M", "E", "M"}*/
 	u8	map_count;
@@ -203,6 +212,9 @@ static int __init bpi_parse_signature (u64 signature)
 	return 0;
 }
 
+static void (*p_init_acpi_arch_os_table_override)(struct acpi_table_header *, struct acpi_table_header **) = NULL;
+static void init_acpi_arch_os_table_override (struct acpi_table_header *existing_table, struct acpi_table_header **new_table);
+
 void __init bpi_init(void)
 {
 	if (loongarch_bpi_info.bpi == EFI_INVALID_TABLE_ADDR) {
@@ -220,6 +232,8 @@ void __init bpi_init(void)
 		if (bpi_version >= BPI_VERSION_V2) {
 			bpi_flags = tbl->flags;
 			pr_info("BPI: flags 0x%llx\n", bpi_flags);
+		} else {
+			p_init_acpi_arch_os_table_override = init_acpi_arch_os_table_override;
 		}
 		unsigned long bpi_extlist = tbl->extlist;
 		parse_bpi_ext_list(bpi_extlist);
@@ -292,6 +306,296 @@ void __init bpi_init_node_memblock(void (*p_add_numamem_region)(u64 start, u64 e
 	}
 }
 
+static u8 new_mcfg_buf [ 0
+	+ sizeof(struct acpi_table_mcfg)
+	+ MAX_IO_PICS * sizeof(struct acpi_mcfg_allocation)
+];
+static int __initdata new_mcfg_available = 0;
+
+void __init acpi_arch_table_init_complete(void){
+	if (!new_mcfg_available){
+		return;
+	}
+	pr_info("BPI: installing new MCFG table\n");
+	acpi_install_table((struct acpi_table_header *) new_mcfg_buf);
+}
+
+static void __init init_acpi_arch_os_table_override (struct acpi_table_header *existing_table, struct acpi_table_header **new_table){
+	static int __initdata madt_table_installed = 0;
+	static u8 new_madt_buf[ 0
+		+ sizeof(struct acpi_table_madt)
+		+ sizeof(struct acpi_madt_lio_pic)
+		+ sizeof(struct acpi_madt_core_pic) * MAX_CORE_PIC
+		+ MAX_IO_PICS * ( 0
+			+ sizeof(struct acpi_madt_eio_pic)
+			+ sizeof(struct acpi_madt_msi_pic)
+			+ sizeof(struct acpi_madt_bio_pic)
+		)
+	];
+	if (madt_table_installed){
+		return;
+	}
+	if (bpi_version == BPI_VERSION_NONE) {
+		return;
+	}
+	if (bpi_version > BPI_VERSION_V1) {
+		return;
+	}
+	if (strncmp(existing_table->signature, ACPI_SIG_MADT, 4) != 0) {
+		return;
+	}
+	pr_info("BPI: replacing MADT table\n");
+	struct acpi_table_madt *madt = (struct acpi_table_madt *)existing_table;
+	if (madt->header.length < sizeof(struct acpi_table_madt)) {
+		pr_warn("BPI: MADT table length %u is too small\n", madt->header.length);
+		return;
+	}
+	void *madt_end = (void *)madt + madt->header.length;
+	struct acpi_subtable_header *entry = (struct acpi_subtable_header *)(madt + 1);
+	int entry_count = 0;
+	int local_apic_count = 0;
+	int io_apic_count = 0;
+	u64 node_map = 0;
+	while((void *)entry < madt_end) {
+		unsigned int ent_len = entry->length;
+		if (ent_len < sizeof(struct acpi_subtable_header)) {
+			pr_warn("BPI: MADT entry %d length %u is too small\n", entry_count, ent_len);
+			return;
+		}
+		if((void *)entry + ent_len > madt_end) {
+			pr_warn("BPI: MADT entry %d length overflow\n", entry_count);
+			return;
+		}
+		switch(entry->type) {
+		case ACPI_MADT_TYPE_LOCAL_APIC:
+			local_apic_count++;
+			struct acpi_madt_local_apic *lapic = (struct acpi_madt_local_apic *)entry;
+			node_map |= 1 << (lapic->id / CORES_PER_EIO_NODE);
+			break;
+		case ACPI_MADT_TYPE_IO_APIC:
+			io_apic_count++;
+			break;
+		}
+		acpi_table_print_madt_entry(entry);
+
+		entry = (struct acpi_subtable_header *)((void *)entry + ent_len);
+	}
+
+	if (local_apic_count == 0) {
+		pr_warn("BPI: MADT has no local APIC entries\n");
+		return;
+	}
+	if (local_apic_count > MAX_CORE_PIC) {
+		pr_warn("BPI: MADT has too many local APIC entries\n");
+		return;
+	}
+	if (io_apic_count == 0) {
+		pr_warn("BPI: MADT has no IO APIC entries\n");
+		return;
+	}
+	if (io_apic_count > MAX_IO_PICS) {
+		pr_warn("BPI: MADT has too many IO APIC entries\n");
+		return;
+	}
+	size_t new_madt_size = sizeof(struct acpi_table_madt);
+	size_t new_mcfg_size = sizeof(struct acpi_table_mcfg);
+	new_madt_size += sizeof(struct acpi_madt_lio_pic);
+	new_madt_size += sizeof(struct acpi_madt_core_pic) * local_apic_count;
+	if (cpu_has_extioi) {
+		pr_info("BPI: Using EIOINTC interrupt mode\n");
+		new_madt_size += io_apic_count * ( 0
+			+ sizeof(struct acpi_madt_eio_pic)
+			+ sizeof(struct acpi_madt_msi_pic)
+			+ sizeof(struct acpi_madt_bio_pic)
+		);
+		new_madt_size += sizeof(struct acpi_madt_lpc_pic);
+		new_mcfg_size += io_apic_count * sizeof(struct acpi_mcfg_allocation);
+	} else {
+		pr_info("BPI: Using HTVECINTC interrupt mode\n");
+		new_madt_size += 0;
+		new_mcfg_size += sizeof(struct acpi_mcfg_allocation);
+	}
+
+	if (new_madt_size > sizeof(new_madt_buf)) {
+		pr_warn("BPI: new madt will be too large");
+		return;
+	}
+	if (new_mcfg_size > sizeof(new_mcfg_buf)) {
+		pr_warn("BPI: new mcfg will be too large");
+		return;
+	}
+	madt_table_installed = 1;
+	new_mcfg_available = 1;
+
+	struct acpi_table_madt *new_madt = (struct acpi_table_madt *)new_madt_buf;
+
+	new_madt->header = madt->header;
+	new_madt->header.length = new_madt_size;
+	new_madt->header.checksum = 0;
+	new_madt->header.asl_compiler_id[0] = 'B';
+	new_madt->header.asl_compiler_id[1] = 'P';
+	new_madt->header.asl_compiler_id[2] = 'I';
+	new_madt->address = madt->address;
+	new_madt->flags = madt->flags;
+
+	struct acpi_table_mcfg *new_mcfg = (struct acpi_table_mcfg *)new_mcfg_buf;
+
+	memcpy(new_mcfg->header.signature, ACPI_SIG_MCFG, sizeof(new_mcfg->header.signature));
+	new_mcfg->header.length = new_mcfg_size;
+	new_mcfg->header.revision = 1;
+	new_mcfg->header.checksum = 0;
+	memcpy(new_mcfg->header.oem_id, madt->header.oem_id, sizeof(new_mcfg->header.oem_id));
+	memcpy(new_mcfg->header.oem_table_id, madt->header.oem_table_id, sizeof(new_mcfg->header.oem_table_id));
+	new_mcfg->header.oem_revision = madt->header.oem_revision;
+	memcpy(new_mcfg->header.asl_compiler_id, "BPI", sizeof(new_mcfg->header.asl_compiler_id));
+	new_mcfg->header.asl_compiler_revision = 1;
+	memset(new_mcfg->reserved, 0, sizeof(new_mcfg->reserved));
+
+	struct acpi_mcfg_allocation *mcfg_entry = (struct acpi_mcfg_allocation *)(new_mcfg + 1);
+
+	static struct acpi_madt_core_pic __initdata core_pics[MAX_CORE_PIC];
+	static struct acpi_madt_eio_pic __initdata eio_pics[MAX_IO_PICS];
+	static struct acpi_madt_msi_pic __initdata msi_pics[MAX_IO_PICS];
+	static struct acpi_madt_bio_pic __initdata bio_pics[MAX_IO_PICS];
+
+	entry = (struct acpi_subtable_header *)(madt + 1);
+	int core_idx = 0;
+	int eio_idx = 0;
+	while((void *)entry < madt_end) {
+		unsigned int ent_len = entry->length;
+		if(entry->type == ACPI_MADT_TYPE_LOCAL_APIC) {
+			struct acpi_madt_local_apic *lapic = (struct acpi_madt_local_apic *)entry;
+
+			if(core_idx >= local_apic_count){
+				panic("BPI: MADT local APIC entries are more than expected\n");
+			}
+
+			core_pics[core_idx].header.type = ACPI_MADT_TYPE_CORE_PIC;
+			core_pics[core_idx].header.length = sizeof(core_pics[0]);
+			core_pics[core_idx].version = ACPI_MADT_CORE_PIC_VERSION_V1;
+			core_pics[core_idx].processor_id = lapic->processor_id;
+			core_pics[core_idx].core_id = lapic->id;
+			core_pics[core_idx].flags = lapic->lapic_flags;
+
+			core_idx++;
+		}else if(entry->type == ACPI_MADT_TYPE_IO_APIC) {
+			struct acpi_madt_io_apic *ioapic = (struct acpi_madt_io_apic *)entry;
+
+			if(eio_idx >= io_apic_count){
+				panic("BPI: MADT IO APIC entries are more than expected\n");
+			}
+
+			eio_pics[eio_idx].header.type = ACPI_MADT_TYPE_EIO_PIC;
+			eio_pics[eio_idx].header.length = sizeof(eio_pics[0]);
+			eio_pics[eio_idx].version = ACPI_MADT_EIO_PIC_VERSION_V1;
+			eio_pics[eio_idx].cascade = 3 + eio_idx;
+			eio_pics[eio_idx].node = ioapic->id;
+			if(eio_idx == 0){
+				eio_pics[eio_idx].node_map = node_map;
+			}else{
+				eio_pics[0].node_map = node_map & 0x0f0f0f0f0f0f0f0full;
+				eio_pics[eio_idx].node_map = node_map & 0xf0f0f0f0f0f0f0f0ull;
+			}
+
+			unsigned long addr = ioapic->address;
+			if(eio_idx > 0){
+				addr |= nid_to_addrbase(ioapic->id) | HT1LO_OFFSET;
+			}
+
+			msi_pics[eio_idx].header.type = ACPI_MADT_TYPE_MSI_PIC;
+			msi_pics[eio_idx].header.length = sizeof(msi_pics[0]);
+			msi_pics[eio_idx].version = ACPI_MADT_MSI_PIC_VERSION_V1;
+			msi_pics[eio_idx].msg_address = MSI_MSG_ADDRESS;
+			pr_info("BPI: will read MSI start addr for node %d from 0x%lx\n", ioapic->id, addr);
+			msi_pics[eio_idx].start = (((unsigned long)ls7a_readq(addr) >> 48) & 0xff) + 1;
+			pr_info("BPI: done read MSI start addr for node %d from 0x%lx\n", ioapic->id, addr);
+			msi_pics[eio_idx].count = MSI_MSG_DEFAULT_COUNT;
+
+			bio_pics[eio_idx].header.type = ACPI_MADT_TYPE_BIO_PIC;
+			bio_pics[eio_idx].header.length = sizeof(bio_pics[0]);
+			bio_pics[eio_idx].version = ACPI_MADT_BIO_PIC_VERSION_V1;
+			bio_pics[eio_idx].address = addr;
+			bio_pics[eio_idx].size = 0x1000;
+			bio_pics[eio_idx].id = ioapic->id;
+			bio_pics[eio_idx].gsi_base = ioapic->global_irq_base;
+
+			mcfg_entry->address = mcfg_addr_init(ioapic->id);
+			mcfg_entry->pci_segment = eio_idx;
+			mcfg_entry->start_bus_number = 0;
+			mcfg_entry->end_bus_number = 0xFF; // Who knows?
+			mcfg_entry->reserved = 0;
+			mcfg_entry++;
+
+			eio_idx++;
+		}
+		entry = (struct acpi_subtable_header *)((void *)entry + ent_len);
+	}
+	if(eio_idx != io_apic_count || core_idx != local_apic_count) {
+		panic("BPI: MADT entries are less than expected\n");
+	}
+
+	// 1. Core APIC 0x11
+	struct acpi_subtable_header *new_entry = (struct acpi_subtable_header *)(new_madt + 1);
+
+	memcpy(new_entry, core_pics, local_apic_count * sizeof(core_pics[0]));
+	new_entry = (struct acpi_subtable_header *)((void *)new_entry + local_apic_count * sizeof(core_pics[0]));
+
+	// 2. LIO PIC 0x12
+	{
+		struct acpi_madt_lio_pic *lio_pic = (struct acpi_madt_lio_pic *)new_entry;
+		lio_pic->header.type = ACPI_MADT_TYPE_LIO_PIC;
+		lio_pic->header.length = sizeof(*lio_pic);
+		lio_pic->version = ACPI_MADT_LIO_PIC_VERSION_V1;
+		lio_pic->address = LOONGSON_REG_BASE + 0x1400;
+		lio_pic->size = 256;
+		lio_pic->cascade[0] = 2;
+		lio_pic->cascade[1] = 3;
+		lio_pic->cascade_map[0] = 0x00FFFFFF;
+		lio_pic->cascade_map[1] = 0xFF000000;
+		new_entry = (struct acpi_subtable_header *)((void *)new_entry + sizeof(*lio_pic));
+	}
+	// 3. HT PIC 0x13
+	if (!cpu_has_extioi) {
+		// FIX ME: Unsupported
+	} else {
+		// 4. EIO PIC 0x14
+		memcpy(new_entry, eio_pics, io_apic_count * sizeof(eio_pics[0]));
+		new_entry = (struct acpi_subtable_header *)((void *)new_entry + io_apic_count * sizeof(eio_pics[0]));
+		// 5. MSI PIC 0x15
+		memcpy(new_entry, msi_pics, io_apic_count * sizeof(msi_pics[0]));
+		new_entry = (struct acpi_subtable_header *)((void *)new_entry + io_apic_count * sizeof(msi_pics[0]));
+		// 6. BIO PIC 0x16
+		memcpy(new_entry, bio_pics, io_apic_count * sizeof(bio_pics[0]));
+		new_entry = (struct acpi_subtable_header *)((void *)new_entry + io_apic_count * sizeof(bio_pics[0]));
+		// 7. LPC PIC 0x17
+		{
+			struct acpi_madt_lpc_pic *lpc_pic = (struct acpi_madt_lpc_pic *)new_entry;
+			lpc_pic->header.type = ACPI_MADT_TYPE_LPC_PIC;
+			lpc_pic->header.length = sizeof(*lpc_pic);
+			lpc_pic->version = ACPI_MADT_LPC_PIC_VERSION_V1;
+			lpc_pic->address = LS7A_LPC_REG_BASE;
+			lpc_pic->size = SZ_4K;
+			lpc_pic->cascade = 19;
+			new_entry = (struct acpi_subtable_header *)((void *)new_entry + sizeof(*lpc_pic));
+		}
+	}
+	if((void *)new_entry != (void *)new_madt + new_madt_size) {
+		panic("BPI: missing bytes while constructing new MADT\n");
+	}
+	if((void *)mcfg_entry != (void *)new_mcfg + new_mcfg_size) {
+		panic("BPI: missing bytes while constructing new MCFG\n");
+	}
+	new_madt->header.checksum = 0 - ext_listhdr_checksum((u8 *)new_madt, new_madt_size);
+	new_mcfg->header.checksum = 0 - ext_listhdr_checksum((u8 *)new_mcfg, new_mcfg_size);
+	*new_table = (struct acpi_table_header *)new_madt;
+}
+
+void acpi_arch_os_table_override (struct acpi_table_header *existing_table, struct acpi_table_header **new_table){
+	if(p_init_acpi_arch_os_table_override && system_state == SYSTEM_BOOTING) {
+		p_init_acpi_arch_os_table_override(existing_table, new_table);
+	}
+}
+
 int loongarch_have_legacy_bpi (void){
 	return have_bpi;
 }
diff --git a/drivers/acpi/tables.c b/drivers/acpi/tables.c
index 9e1b01c35070..564e5ca523cd 100644
--- a/drivers/acpi/tables.c
+++ b/drivers/acpi/tables.c
@@ -693,6 +693,7 @@ acpi_status acpi_os_table_override(struct acpi_table_header *existing_table,
 			*new_table = (struct acpi_table_header *)&dsdt_amlcode;
 	}
 #endif
+	acpi_arch_os_table_override(existing_table, new_table);
 	if (*new_table != NULL)
 		acpi_table_taint(existing_table);
 	return AE_OK;
@@ -748,6 +749,7 @@ void __init acpi_table_init_complete(void)
 {
 	acpi_table_initrd_scan();
 	check_multiple_madt();
+	acpi_arch_table_init_complete();
 }
 
 int __init acpi_table_init(void)
diff --git a/include/linux/acpi.h b/include/linux/acpi.h
index 0687a442fec7..fff07ee5116b 100644
--- a/include/linux/acpi.h
+++ b/include/linux/acpi.h
@@ -772,6 +772,16 @@ int acpi_get_local_u64_address(acpi_handle handle, u64 *addr);
 int acpi_get_local_address(acpi_handle handle, u32 *addr);
 const char *acpi_get_subsystem_id(acpi_handle handle);
 
+#ifndef ACPI_HAVE_ARCH_TABLE_OVERRIDE
+static inline void acpi_arch_os_table_override (struct acpi_table_header *existing_table, struct acpi_table_header **new_table){
+}
+#endif
+#ifndef ACPI_HAVE_ARCH_TABLE_INIT_COMPLETE
+static inline void acpi_arch_table_init_complete(void)
+{
+}
+#endif
+
 #else	/* !CONFIG_ACPI */
 
 #define acpi_disabled 1
-- 
2.47.0

